// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ogcache

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Title
//  - Type
//  - Image
//  - URL
//  - Audio
//  - Description
//  - Determiner
//  - Locale
//  - LocaleAlternate
//  - SiteName
//  - Video
type OpenGraph struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Image string `thrift:"image,3" db:"image" json:"image"`
  URL string `thrift:"url,4" db:"url" json:"url"`
  Audio string `thrift:"audio,5" db:"audio" json:"audio"`
  Description string `thrift:"description,6" db:"description" json:"description"`
  Determiner string `thrift:"determiner,7" db:"determiner" json:"determiner"`
  Locale string `thrift:"locale,8" db:"locale" json:"locale"`
  LocaleAlternate []string `thrift:"locale_alternate,9" db:"locale_alternate" json:"locale_alternate"`
  SiteName string `thrift:"site_name,10" db:"site_name" json:"site_name"`
  Video string `thrift:"video,11" db:"video" json:"video"`
}

func NewOpenGraph() *OpenGraph {
  return &OpenGraph{}
}


func (p *OpenGraph) GetTitle() string {
  return p.Title
}

func (p *OpenGraph) GetType() string {
  return p.Type
}

func (p *OpenGraph) GetImage() string {
  return p.Image
}

func (p *OpenGraph) GetURL() string {
  return p.URL
}

func (p *OpenGraph) GetAudio() string {
  return p.Audio
}

func (p *OpenGraph) GetDescription() string {
  return p.Description
}

func (p *OpenGraph) GetDeterminer() string {
  return p.Determiner
}

func (p *OpenGraph) GetLocale() string {
  return p.Locale
}

func (p *OpenGraph) GetLocaleAlternate() []string {
  return p.LocaleAlternate
}

func (p *OpenGraph) GetSiteName() string {
  return p.SiteName
}

func (p *OpenGraph) GetVideo() string {
  return p.Video
}
func (p *OpenGraph) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OpenGraph)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *OpenGraph)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *OpenGraph)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *OpenGraph)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *OpenGraph)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Audio = v
}
  return nil
}

func (p *OpenGraph)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *OpenGraph)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Determiner = v
}
  return nil
}

func (p *OpenGraph)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *OpenGraph)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LocaleAlternate =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.LocaleAlternate = append(p.LocaleAlternate, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OpenGraph)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.SiteName = v
}
  return nil
}

func (p *OpenGraph)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Video = v
}
  return nil
}

func (p *OpenGraph) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OpenGraph"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenGraph) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *OpenGraph) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *OpenGraph) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:image: ", p), err) }
  return err
}

func (p *OpenGraph) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  return err
}

func (p *OpenGraph) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("audio", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:audio: ", p), err) }
  if err := oprot.WriteString(string(p.Audio)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.audio (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:audio: ", p), err) }
  return err
}

func (p *OpenGraph) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:description: ", p), err) }
  return err
}

func (p *OpenGraph) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("determiner", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:determiner: ", p), err) }
  if err := oprot.WriteString(string(p.Determiner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.determiner (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:determiner: ", p), err) }
  return err
}

func (p *OpenGraph) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:locale: ", p), err) }
  if err := oprot.WriteString(string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:locale: ", p), err) }
  return err
}

func (p *OpenGraph) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale_alternate", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:locale_alternate: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.LocaleAlternate)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LocaleAlternate {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:locale_alternate: ", p), err) }
  return err
}

func (p *OpenGraph) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("site_name", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:site_name: ", p), err) }
  if err := oprot.WriteString(string(p.SiteName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.site_name (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:site_name: ", p), err) }
  return err
}

func (p *OpenGraph) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("video", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:video: ", p), err) }
  if err := oprot.WriteString(string(p.Video)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.video (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:video: ", p), err) }
  return err
}

func (p *OpenGraph) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenGraph(%+v)", *p)
}

type OgService interface {
  // Parameters:
  //  - URL
  Inquiry(ctx context.Context, url string) (r *OpenGraph, err error)
}

type OgServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewOgService instead
func NewOgServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OgServiceClient {
  return &OgServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewOgService instead
func NewOgServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OgServiceClient {
  return &OgServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewOgServiceClient(c thrift.TClient) *OgServiceClient {
  return &OgServiceClient{
    c: c,
  }
}

// Parameters:
//  - URL
func (p *OgServiceClient) Inquiry(ctx context.Context, url string) (r *OpenGraph, err error) {
  var _args1 OgServiceInquiryArgs
  _args1.URL = url
  var _result2 OgServiceInquiryResult
  if err = p.c.Call(ctx, "inquiry", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

type OgServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler OgService
}

func (p *OgServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *OgServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *OgServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewOgServiceProcessor(handler OgService) *OgServiceProcessor {

  self3 := &OgServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["inquiry"] = &ogServiceProcessorInquiry{handler:handler}
return self3
}

func (p *OgServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type ogServiceProcessorInquiry struct {
  handler OgService
}

func (p *ogServiceProcessorInquiry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OgServiceInquiryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inquiry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OgServiceInquiryResult{}
var retval *OpenGraph
  var err2 error
  if retval, err2 = p.handler.Inquiry(ctx, args.URL); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inquiry: " + err2.Error())
    oprot.WriteMessageBegin("inquiry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("inquiry", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - URL
type OgServiceInquiryArgs struct {
  URL string `thrift:"url,1" db:"url" json:"url"`
}

func NewOgServiceInquiryArgs() *OgServiceInquiryArgs {
  return &OgServiceInquiryArgs{}
}


func (p *OgServiceInquiryArgs) GetURL() string {
  return p.URL
}
func (p *OgServiceInquiryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OgServiceInquiryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *OgServiceInquiryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inquiry_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OgServiceInquiryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *OgServiceInquiryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OgServiceInquiryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OgServiceInquiryResult struct {
  Success *OpenGraph `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOgServiceInquiryResult() *OgServiceInquiryResult {
  return &OgServiceInquiryResult{}
}

var OgServiceInquiryResult_Success_DEFAULT *OpenGraph
func (p *OgServiceInquiryResult) GetSuccess() *OpenGraph {
  if !p.IsSetSuccess() {
    return OgServiceInquiryResult_Success_DEFAULT
  }
return p.Success
}
func (p *OgServiceInquiryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OgServiceInquiryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OgServiceInquiryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &OpenGraph{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OgServiceInquiryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inquiry_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OgServiceInquiryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OgServiceInquiryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OgServiceInquiryResult(%+v)", *p)
}
